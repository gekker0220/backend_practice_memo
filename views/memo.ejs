<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Crud</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css"
    />
    <meta
      http-equiv="Content-Security-Policy"
      content="script-src 'self' 'unsafe-inline';"
    />
  </head>
  <style>
    .main {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
    }
    #memo_list {
      display: flex;
      flex-direction: column;
      gap: 10px;
      padding: 20px;
      background-color: #fff;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      border-radius: 8px;
      overflow-y: scroll;
      height: 60vh;
    }

    .listItem {
      display: flex;
      flex-direction: column;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 4px;
    }
    .bbtn {
      background-color: skyblue;
    }
    .rbtn {
      background-color: red;
    }

    .memoIndex {
      font-weight: bold;
      color: #333;
    }

    .memoContent {
      margin-top: 5px;
      color: #555;
    }
    #remove:hover {
      background-color: #e8eaf6;
      color: black;
    }
    #idinput {
      position: absolute;
    }
  </style>
  <body>
    <div
      class="row"
      style="
        text-align: center;
        position: absolute;
        width: 100%;
        display: flex;
        flex-direction: row;
      "
    >
      <div id="idinput" class="col s6"></div>
      <a
        href="/"
        class="col s6"
        onclick="()=>{
          deleteCookie(userid)
      }"
        >로그아웃</a
      >
    </div>
    <div class="container main">
      <div>Gekker Backend Practice 1, Memo</div>

      <div class="container row" style="display: flex; flex-direction: row">
        <div class="col s8">
          <textarea name="text" id="text" cols="30" rows="10"></textarea>
        </div>
        <div class="btns col s4 center-align">
          <a class="waves-effect waves-light btn" id="load">갱신</a>
          <a class="waves-effect waves-light btn" id="add">추가</a>
          <a class="waves-effect waves-light btn bbtn" id="remove">제거</a>
        </div>
      </div>
      <div id="memo_list" class="container"></div>
    </div>
  </body>
  <script>
    window.onload = () => {
      loading_memo();
    };

    function deleteCookie(name) {
      document.cookie =
        name + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
    }

    const getCookieValue = (name) =>
      document.cookie.match("(^|;)\\s*" + name + "\\s*=\\s*([^;]+)")?.pop() ||
      "";

    const userid = getCookieValue("userid");
    document.getElementById("idinput").innerHTML = `ID : ${userid}`;

    let text = document.getElementById("text");
    let add = document.getElementById("add");
    let remove = document.getElementById("remove");
    let memo_list = document.getElementById("memo_list");
    let rmstate = false;

    let whichNumRM;

    function escapeHtml(str) {
      return str.replace(/[&<>"']/g, (match) => {
        return {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#39;",
        }[match];
      });
    }

    //메모 저장
    add.addEventListener("click", () => {
      if (text.value.trim() === "") alert("메모를 입력하세요");
      else {
        let userInput = text.value;
        let escapedInput = escapeHtml(userInput);

        fetch("http://localhost:3000/users/memo", {
          method: "POST", // Specify the HTTP method
          headers: {
            "Content-Type": "application/json", // Specify the content type
          },
          body: JSON.stringify({
            userid: userid,
            content: escapedInput,
          }),
        })
          .then((response) => {
            // 서버 응답을 JSON 형태로 파싱
            return response.json();
          })
          .then((data) => {
            // 처리할 데이터
            console.log(data);
            loading_memo();
          })
          .catch((error) => {
            console.error("Error:", error);
          });
      }
    });

    //메모 삭제
    remove.addEventListener("click", () => {
      if (!rmstate) {
        rmstate = true;
        remove.classList.add("rbtn");
        remove.classList.remove("bbtn");
      } else {
        rmstate = false;
        remove.classList.remove("rbtn");
        remove.classList.add("bbtn");
      }
    });
    function remove_memo() {
      fetch("http://localhost:3000/users/remove_memo", {
        method: "POST", // Specify the HTTP method
        headers: {
          "Content-Type": "application/json", // Specify the content type
        },
        body: JSON.stringify({
          userid: userid,
          whichNumRM: whichNumRM,
        }),
      })
        .then((response) => {
          // 서버 응답을 JSON 형태로 파싱
          return response.json();
        })
        .then((data) => {
          // 처리할 데이터
        })
        .catch((error) => {
          console.error("Error:", error);
        });
    }

    function loading_memo() {
      fetch("http://localhost:3000/users/load_memo", {
        method: "POST", // Specify the HTTP method
        headers: {
          "Content-Type": "application/json", // Specify the content type
        },
        body: JSON.stringify({
          userid: userid,
        }),
      })
        .then((response) => {
          // 서버 응답을 JSON 형태로 파싱
          return response.json();
        })
        .then((data) => {
          // 처리할 데이터
          let memos = data.data;
          console.log(memos.length);
          create_memo(memos);
        })
        .catch((error) => {
          console.error("Error:", error);
        });
    }

    function create_memo(data) {
      for (let i = 0; i < data.length; i++) {
        // 중복 체크
        if (!isMemoExist(data[i].id)) {
          let box = document.createElement("div");
          let index = document.createElement("span");
          let content = document.createElement("span");

          index.innerHTML = "Memo #" + data[i].id;
          content.innerHTML = data[i].memo_content;

          box.classList.add("listItem");
          index.classList.add("memoIndex");
          content.classList.add("memoContent");

          box.onclick = () => {
            if (rmstate == true) {
              box.remove();
              whichNumRM = data[i].id;
              remove_memo();
            }
          };

          box.appendChild(index);
          box.appendChild(content);
          memo_list.appendChild(box);
        }
      }
    }
    // 중복 체크 함수
    function isMemoExist(memoId) {
      // memo_list의 자식 요소 중에서 memoId를 가진 요소가 있는지 확인
      return Array.from(memo_list.children).some((child) => {
        return (
          child.querySelector(".memoIndex").textContent === "Memo #" + memoId
        );
      });
    }
    document.getElementById("load").addEventListener("click", () => {
      loading_memo();
    });
  </script>
</html>
